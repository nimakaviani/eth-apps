"use strict";

describe('Deployer logs', () => {
    const chai = require('chai');
    chai.use(require('chai-as-promised'));
    const expect = chai.expect;

    const TestRPC = require("ethereumjs-testrpc");
    const Web3 = require('web3');
    const web3 = new Web3(TestRPC.provider());
    const Deployer = require('../src/index');
    var address;

    before(() => {
        const Promise = require('bluebird');
        Promise.promisifyAll(web3.eth);
        return web3.eth.getAccountsAsync()
            .then(accounts => {
                address = accounts[0];
            });
    });

    it('A valid web3 instance is required', () => {
        const deployer = new Deployer({
            address: address
        });

        var log = '';
        deployer.logs((level, message) => {
            log = `${level} : ${message}`;
        });

        return deployer.deployContracts({})
            .catch(() => expect(log).to.contain('Error : A valid web3 instance is required'));
    });

    it('A valid address is required', () => {
        const deployer = new Deployer({
            web3: web3
        });

        var log = '';
        deployer.logs((level, message) => {
            log = `${level} : ${message}`;
        });

        return deployer.deployContracts({})
            .catch(() => expect(log).to.contain('Error : A valid address is required'));
    });

    it('Smart contract sources is required', () => {
        const deployer = new Deployer({
            web3: web3,
            address: address
        });

        var log = '';
        deployer.logs((level, message) => {
            log = `${level} : ${message}`;
        });

        return deployer.deployContracts({})
            .catch(() => expect(log).to.contain('Error : Smart contract sources is required'));
    });

    it('When password is supplied try to unlock account', () => {
        const deployer = new Deployer({
            web3: web3,
            address: address,
            password: 'aPassword'
        });

        var log = '';
        deployer.logs((level, message) => {
            log = `${level} : ${message}`;
        });

        return deployer.deployContracts([{}], [], [''])
            .catch(() => expect(log).to.contain('Error encounter while trying to unlock account Error: RPC method personal_unlockAccount not supported.'));
    });

    it('Compile and deploy contracts', () => {
        const deployer = new Deployer({
            web3: web3,
            address: address
        });

        var logs = [];
        deployer.logs((level, message) => {
            logs.push(`${level} : ${message}`);
        });

        const fs = require('fs');

        const sources = {
            'ContractA.sol': fs.readFileSync('./test/contracts/ContractA.sol', 'utf8'),
            'ContractB.sol': fs.readFileSync('./test/contracts/ContractB.sol', 'utf8')
        }

        return deployer.deployContracts(sources, {}, ['ContractA', 'ContractB'])
            .then(contracts => {
                expect(logs[1]).to.contain('Debug : Compiling contracts');
                expect(logs[2]).to.contain('Debug : Contracts compiled');
                expect(logs[3]).to.contain('Debug : Deploying contract ContractA');
                expect(logs[4]).to.contain('Debug : Deploying contract ContractB');
                expect(logs[8]).to.contain(`Debug : ContractA deployed with address ${contracts.ContractA.address}`);
                expect(logs[9]).to.contain(`Debug : ContractB deployed with address ${contracts.ContractB.address}`);
            });
    }).timeout(15000);


    it('Compile with errors', () => {
        const deployer = new Deployer({
            web3: web3,
            address: address
        });

        const fs = require('fs');

        const sources = {
            'ContractA.sol': fs.readFileSync('./test/contracts/ContractA.sol', 'utf8'),
            'ContractC.sol': fs.readFileSync('./test/contracts/ContractC.sol', 'utf8')
        }

        var log = '';
        deployer.logs((level, message) => {
            log = `${level} : ${message}`;
        });

        const message = 'ContractC.sol:16:5: Error: Function with same name and arguments defined twice.\n    function greet() constant returns (string) {\n    ^\nSpanning multiple lines.\nOther declaration is here: ContractC.sol:12:5: \n    function greet() constant returns (string) {\n    ^\nSpanning multiple lines.\n\n';
        return deployer.deployContracts(sources, [], [''])
            .catch(() => expect(log).to.contain(message));
    }).timeout(15000);

});
